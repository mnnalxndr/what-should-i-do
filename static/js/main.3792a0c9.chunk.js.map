{"version":3,"sources":["Chooser.jsx","App.js","serviceWorker.js","index.js"],"names":["PERSONS","OPTIONS","Both","Tash","Alex","Chooser","useState","person","setPerson","suggestion","setSuggestion","getNewSuggestion","options","Math","floor","random","length","setPersonHandler","className","type","onClick","newSuggestion","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAEMA,EACE,OADFA,EAEE,OAGFC,EAAU,CACdC,KAAM,CACJ,mBACA,cACA,aACA,gBAEFC,KAAM,CACJ,mBACA,wBACA,OACA,YACA,QACA,UACA,UACA,aAEFC,KAAM,CACJ,YACA,YACA,kBACA,iBACA,eACA,gBACA,iBACA,QAuDWC,EAnDC,WAAO,IAAD,EACQC,mBAAS,MADjB,mBACbC,EADa,KACLC,EADK,OAEgBF,mBAAS,IAFzB,mBAEbG,EAFa,KAEDC,EAFC,KAIdC,EAAmB,WACvB,IAAMC,EAAO,sBACRX,EAAQC,MADA,YAERD,EAAQM,KAEb,OAAOK,EAAQC,KAAKC,MAAMD,KAAKE,SAAWH,EAAQI,UAU9CC,EAAmB,SAACV,GACxBG,EAAc,IACdF,EAAUD,IAGZ,OACE,yBAAKW,UAAU,OACb,iDACA,wDACA,6BACE,4BACEC,KAAK,SACLC,QAAS,kBAAMH,EAAiBjB,KAFlC,QAIA,4BACEmB,KAAK,SACLC,QAAS,kBAAMH,EAAiBjB,KAFlC,SAKDO,EACC,6BACE,4BACEY,KAAK,SACLC,QA/BY,WAEpB,IADA,IAAIC,EAAgBV,IACbU,IAAkBZ,GACvBY,EAAgBV,IAElBD,EAAcW,KAwBR,WAGyB,KAAfZ,EAAoB,GAAK,WAHnC,gBAG4DF,IAE9D,KACA,4BAAKE,KCrEEa,MARf,WACE,OACE,yBAAKJ,UAAU,OACb,kBAAC,EAAD,QCIcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3792a0c9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst PERSONS = {\r\n  ALEX: 'Alex',\r\n  TASH: 'Tash'\r\n}\r\n\r\nconst OPTIONS = {\r\n  Both: [\r\n    'Message a friend',\r\n    'House chore',\r\n    'Free time!',\r\n    'Dog Training'\r\n  ],\r\n  Tash: [\r\n    'Carry on writing',\r\n    'Write some back story',\r\n    'Blog',\r\n    'Data Camp',\r\n    'Piano',\r\n    'Pilates',\r\n    'Drawing',\r\n    'Gardening'\r\n  ],\r\n  Alex: [\r\n    'Band Idea',\r\n    'Solo Idea',\r\n    'Electronic Idea',\r\n    'Practice/Learn',\r\n    'Music Course',\r\n    'Coding course',\r\n    'Coding project',\r\n    'Run'\r\n  ]\r\n};\r\n\r\nconst Chooser = () => {\r\n  const [person, setPerson] = useState(null);\r\n  const [suggestion, setSuggestion] = useState('');\r\n\r\n  const getNewSuggestion = () => {\r\n    const options = [\r\n      ...OPTIONS.Both,\r\n      ...OPTIONS[person]\r\n    ];\r\n    return options[Math.floor(Math.random() * options.length)]\r\n  }\r\n  const chooseHandler = () => {\r\n    let newSuggestion = getNewSuggestion();\r\n    while (newSuggestion === suggestion) {\r\n      newSuggestion = getNewSuggestion();\r\n    }\r\n    setSuggestion(newSuggestion);\r\n  }\r\n\r\n  const setPersonHandler = (person) => {\r\n    setSuggestion('');\r\n    setPerson(person);\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <h1>What should I do?</h1>\r\n      <h3>Who are we choosing for?</h3>\r\n      <div>\r\n        <button\r\n          type='button'\r\n          onClick={() => setPersonHandler(PERSONS.ALEX)}\r\n        >Alex</button>\r\n        <button\r\n          type='button'\r\n          onClick={() => setPersonHandler(PERSONS.TASH)}\r\n        >Tash</button>\r\n      </div>\r\n      {person ? \r\n        <div>\r\n          <button\r\n            type='button'\r\n            onClick={chooseHandler}\r\n          >Suggest {suggestion === '' ? '' : 'another '}activity for {person}</button>\r\n        </div> :\r\n        null }\r\n        <h3>{suggestion}</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chooser;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Chooser from './Chooser';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Chooser />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}